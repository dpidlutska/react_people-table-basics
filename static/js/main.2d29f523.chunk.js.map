{"version":3,"sources":["components/NavBar.tsx","App.tsx","pages/HomePage.tsx","components/Loader/Loader.tsx","api.ts","utils/constants.ts","components/PersonLink.tsx","components/Person.tsx","components/PeopleTable.tsx","pages/PeoplePage.tsx","utils/getPreparedPeople.ts","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","NavBar","className","role","to","App","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","COLUMNS_NAMES","PersonLink","person","slug","sex","name","isFemale","Person","personSlug","useParams","born","died","fatherName","motherName","mother","father","PeopleTable","people","map","columnName","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","isPeopleLoadingError","hasNoPeopleFromServer","length","hasPeopleToShow","useEffect","peopleFromServer","find","getPreparedPeople","catch","finally","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.2d29f523.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  cn('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink to=\"/\" className={getLinkClass}>\n          Home\n        </NavLink>\n\n        <NavLink to=\"/people\" className={getLinkClass}>\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { PersonType } from './types/PersonType';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<PersonType[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export const FEMALE = 'f';\nexport const EMPTY_VALUE = '-';\n\nexport const COLUMNS_NAMES = [\n  'Name',\n  'Sex',\n  'Born',\n  'Died',\n  'Mother',\n  'Father',\n];\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PersonType } from '../types';\nimport { FEMALE } from '../utils/constants';\n\ntype Props = {\n  person: PersonType;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n\n  const isFemale = sex === FEMALE;\n\n  return (\n    <Link\n      to={`${slug}`}\n      className={cn({\n        'has-text-danger': isFemale,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PersonType } from '../types';\nimport { EMPTY_VALUE, FEMALE } from '../utils/constants';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: PersonType;\n};\n\nexport const Person: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams();\n\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  const isFemale = sex === FEMALE;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': slug === personSlug,\n      })}\n    >\n      <td>\n        <Link\n          to={`people/${slug}`}\n          className={cn({\n            'has-text-danger': isFemale,\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || EMPTY_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || EMPTY_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PersonType } from '../types';\nimport { COLUMNS_NAMES } from '../utils/constants';\nimport { Person } from './Person';\n\ntype Props = {\n  people: PersonType[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {COLUMNS_NAMES.map(columnName => (\n            <th key={columnName}>\n              {columnName}\n            </th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <Person key={person.slug} person={person} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../components/Loader';\nimport { getPeople } from '../api';\nimport { PersonType } from '../types';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { PeopleTable } from '../components/PeopleTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<PersonType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const isPeopleLoadingError = !isLoading && isError;\n  const hasNoPeopleFromServer = !isLoading && !isError && !people.length;\n  const hasPeopleToShow = !isLoading && !isError && !!people.length;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => (\n        setPeople(getPreparedPeople(peopleFromServer))\n      ))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isPeopleLoadingError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {hasNoPeopleFromServer && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {hasPeopleToShow && (\n            <PeopleTable people={people} />\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n};\n","import { PersonType } from '../types';\n\nexport const getPreparedPeople = (people: PersonType[]) => {\n  return (\n    people.map(person => {\n      return {\n        ...person,\n        mother: people.find(mother => mother.name === person.motherName),\n        father: people.find(father => father.name === person.fatherName),\n      };\n    })\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\" element={<PeoplePage />}>\n            <Route path=\":personSlug\" />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}